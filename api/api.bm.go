// Code generated by protoc-gen-bm v0.1, DO NOT EDIT.
// source: api.proto

/*
Package api is a generated blademaster stub package.
This code was generated with kratos/tool/protobuf/protoc-gen-bm v0.1.

package 命名使用 {appid}.{version} 的方式, version 形如 v1, v2 ..

It is generated from these files:
	api.proto
*/
package api

import (
	"context"

	bm "github.com/go-kratos/kratos/pkg/net/http/blademaster"
	"github.com/go-kratos/kratos/pkg/net/http/blademaster/binding"
)
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

// to suppressed 'imported but not used warning'
var _ *bm.Context
var _ context.Context
var _ binding.StructValidator

var PathRiotPing = "/riot.service.v1.Riot/Ping"
var PathRiotSayHello = "/riot.service.v1.Riot/SayHello"
var PathRiotSayHelloURL = "/riot/say_hello"
var PathRiotHeartBeat = "/riot/heartbeat"
var PathRiotDocInx = "/riot/docinx"
var PathRiotDelete = "/riot/del"
var PathRiotSearch = "/riot/search"
var PathRiotWgDist = "/riot/search"

// RiotBMServer is the server API for Riot service.
type RiotBMServer interface {
	Ping(ctx context.Context, req *google_protobuf1.Empty) (resp *google_protobuf1.Empty, err error)

	SayHello(ctx context.Context, req *HelloReq) (resp *google_protobuf1.Empty, err error)

	SayHelloURL(ctx context.Context, req *HelloReq) (resp *HelloResp, err error)

	HeartBeat(ctx context.Context, req *HeartReq) (resp *Reply, err error)

	DocInx(ctx context.Context, req *DocReq) (resp *Reply, err error)

	Delete(ctx context.Context, req *DeleteReq) (resp *Reply, err error)

	Search(ctx context.Context, req *SearchReq) (resp *SearchReply, err error)

	WgDist(ctx context.Context, req *WgDistReq) (resp *WgDistResp, err error)
}

var RiotSvc RiotBMServer

func riotPing(c *bm.Context) {
	p := new(google_protobuf1.Empty)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := RiotSvc.Ping(c, p)
	c.JSON(resp, err)
}

func riotSayHello(c *bm.Context) {
	p := new(HelloReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := RiotSvc.SayHello(c, p)
	c.JSON(resp, err)
}

func riotSayHelloURL(c *bm.Context) {
	p := new(HelloReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := RiotSvc.SayHelloURL(c, p)
	c.JSON(resp, err)
}

func riotHeartBeat(c *bm.Context) {
	p := new(HeartReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := RiotSvc.HeartBeat(c, p)
	c.JSON(resp, err)
}

func riotDocInx(c *bm.Context) {
	p := new(DocReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := RiotSvc.DocInx(c, p)
	c.JSON(resp, err)
}

func riotDelete(c *bm.Context) {
	p := new(DeleteReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := RiotSvc.Delete(c, p)
	c.JSON(resp, err)
}

func riotSearch(c *bm.Context) {
	p := new(SearchReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := RiotSvc.Search(c, p)
	c.JSON(resp, err)
}

func riotWgDist(c *bm.Context) {
	p := new(WgDistReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := RiotSvc.WgDist(c, p)
	c.JSON(resp, err)
}

// RegisterRiotBMServer Register the blademaster route
func RegisterRiotBMServer(e *bm.Engine, server RiotBMServer) {
	RiotSvc = server
	e.GET("/riot.service.v1.Riot/Ping", riotPing)
	e.GET("/riot.service.v1.Riot/SayHello", riotSayHello)
	e.GET("/riot/say_hello", riotSayHelloURL)
	e.POST("/riot/heartbeat", riotHeartBeat)
	e.POST("/riot/docinx", riotDocInx)
	e.POST("/riot/del", riotDelete)
	e.POST("/riot/search", riotSearch)
	e.POST("/riot/search", riotWgDist)
}
